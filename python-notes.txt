-> rindex: If substring exists inside the string, it returns the highest index in the string where substring is found.
example:
a = "ababcabcc"
a.rindex('c')
output: 8

--> dict.fromkeys(['name','age','city'],'unkown')
output : {'name':'unknown','age':'unknown','city':'unknown'}

--> import textwrap
print(textwrap.wrap("ADABCDCCE",3))
output : ['ADA','BCD','CCE']
- It divides the given string in chunks of given size and returns a list

--> from collections import OrderedDict
OrderedDict.fromkeys()

--> To take unknown no of inputs
name, *line = input().split()
here it will save the first input in name
Then the next all inputs will be appended in list one by one
eg: input: aman 5 6 45 4
name = 'aman'
line = ['5','6','45','4']

--> implement an OrderedDict
y = OrderedDict()
now y is a dictionary and now you can append keys and values.


--> itertools
itertools.accumulate(data,func/attr)    //it compares the function/attribute with each element of data
itertools.chain(*lists)  //makes an iterator of given lists
itertools.combinations(data,size)   //gives the combinations of size
itertools.islice(data,start,stop,step)
itertools.islice(data,n)  //cuts first n elements
itertools.permutations(data)    //gives all permutations possible
itertools.product(data1,data2)  //cartesian product
itertools.starmap(function,iterable)
//This function makes an iterator that computes the function using arguments obtained from the iterable
//eg (import operator)
data = [(2, 6), (8, 4), (7, 3)]
result = itertools.starmap(operator.mul, data)
for each in result:
    print(each)

//output
12
32
21


--> default dict
1) No need to initialize keys : here values are integer

>>> from collections import defaultdict

>>> s = 'mississippi'
>>> d = defaultdict(int)
>>> for k in s:
...     d[k] += 1
...
>>> d.items()
[('i', 4), ('p', 2), ('s', 4), ('m', 1)]

2) No need to initialize keys : here values are list

>>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
>>> d = defaultdict(list)
>>> for k, v in s:
...     d[k].append(v)
...
>>> d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]





-----> Sort 2D list 
envelopes = sorted(envelopes, key=lambda l: l[0])
here l[0] means sort w.r.t first column







------> heapq => priority queue implementation in python -> works as min heap


import heapq

li = [2,3,1,5,6]

heapq.heapify(li)

heapq.heappop()  #returns 1
heapq.heappop()  #returns 2

heapq.heappush(li, 1)
heapq.heappop() #returns 1

li[0] #returns minimum element without removing it i.e returns 3






-----> python bitwise operators

xor     => 0 ^ 1 = 1
and     => 0 & 1 = 0
or      => 0 | 1 = 1
rshift  => num>>1
lshift  => num<<1

some xor props:

-> a ^ 0 = a
-> y = a^b
-> y^a = b
-> y^b = a

note: here num should be in decimal format i.e base 10







-----> ASCII in python

1) convert character to ASCII
ord('a') -> 97

2) convert ASCII to character
chr(97) -> 'a'

